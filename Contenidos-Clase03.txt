Clase 03: 
=========

Control de Versiones:
====================
Repaso: 15min
=======
    ¿Qué es el control de versiones y por qué es importante?
    Es un sistema que permite gestionar y rastrear los cambios realizados en los archivos de un proyecto a lo largo del tiempo

    Tipos de sistemas de control de versiones:
        -Sistemas de Control de Versiones Locales: 
            copias manuales de archivos
        -Sistemas de Control de Versiones Centralizados (CVCS) (ejemplo: SVN + TortoiseSVN o Integración con IDEs: Eclipse, IntelliJ IDEA o NetBeans): 
            servidor central que almacena todas las versiones de los archivos
            control de acceso y permisos
            historial de cambios centralizado
            dependencia del servidor central
        -Sistemas de Control de Versiones Distribuidos (DVCS) (ejemplo: Git). 
            cada desarrollador tiene una copia completa del repositorio
            No hay dependencia de un servidor central.

    ¿Para que sirve Git?
    Sistema de control de versiones distribuido ampliamente utilizado para registrar cambios en archivos y coordinar el trabajo entre múltiples personas en proyectos de software
    creado por Linus Torvalds en 2005 
        Rastrear cambios en el código.
        Trabajar en equipo de manera eficiente.
        Revertir errores y mantener un historial de cambios.
        Desarrollar nuevas características en ramas separadas.

    ¿Para qué Sirven GitHub y GitLab?
    Alojar Repositorios Git, guardar el código fuente que están en la máquina de desarrollador
    Colaboración en Equipo, trabajar en equipo


    Instalación y config Git, Github:
        Instalar git: git bash, powershell, terminal vsc
        Configuración inicial: 
            git config --global user.name "sbsanchez21"
            git config --global user.email "sbsanchez21@email.com"
        Verificación de la instalación: git --version
        Crear cuenta en github


    Áreas de un Repositorio Git, Repo GitHub:
    PC del desarrollador:	
        Working Directory (Directorio de Trabajo).
            Es la carpeta local en tu máquina donde trabajas con los archivos del proyecto.
            Aquí es donde editas, creas o eliminas archivos
            Los cambios aquí no están registrados por Git hasta que los agregas al Staging Area.	

        Staging Area (Área de Preparación).
            Es un área intermedia donde preparas los cambios que quieres incluir en el próximo commit
            Permite seleccionar qué cambios quieres incluir en el commit.
            Puedes agregar solo algunos archivos
            git add <archivo> 
            git add .

        Repository (Repositorio)
            Es donde Git almacena todo el historial completo de cambios, ramas, tags y configuraciones
            git commit -m "Mensaje descriptivo" Guarda los cambios del Staging Area en el repositorio.

    Repositorio en servidor remoto GitHub o GitLab:
        Repositorio Remoto (Opcional): Donde se almacena tu repo local 



    Crear Repositorio Local con Git
    - Inicializar un repositorio: `git init`. En VSC se ve un indicador
    - Ver el estado del repositorio: `git status`.
    - Agregar archivos al staging area: `git add <archivo>`.
    - Confirmar cambios: `git commit -m "Mensaje descriptivo"`.
    - Ver el historial de commits: `git log`.

    Vincular un repo local a uno remoto y subir repo a Github:
        - crear repo en github o gitlab, obtener url
        - vincular repositorio
        git remote add origin https://github.com/sbsanchez21/clase02Uade.git
        - verificar si están vinculados 
        git remote -v
        - ver la rama donde estoy
        git branch
        - subir los cambios del repo local al remoto 
        git push -u origin master



Tema Nuevo:
===========
Branches ramas en Git
   - ¿Qué es una rama y por qué usarla?
	Es una línea de desarrollo independiente que permite trabajar en nuevas funcionalidades, correcciones de errores o experimentos sin interferir con el código estable principal. 
   
   - Crear una rama: `git branch <nombre-rama>`.
	Estamos en la en la rama master y queremos crear una nueva rama para desarrollar una funcionalidad de login:
	git branch feature/login
	Esto crea una rama llamada feature/login, pero no cambia automáticamente a ella.

   - Cambiar de rama: `git checkout <nombre-rama>`.`git switch <nombre-rama>`.
	Este comando te permite moverte a una rama específica para empezar a trabajar en ella.
	git checkout feature/login
	git switch feature/login

   - Fusionar ramas: `git merge <nombre-rama>`.
	Supongamos que terminaste de desarrollar la funcionalidad de login en feature/login y quieres fusionarla con master:
   	git checkout master       # Cambias a la rama master
	git merge feature/login  # Fusionas feature/login en master
	Si no hay conflictos, Git fusionará automáticamente los cambios. 
	Si hay conflictos significa que hay cambios en las mismas partes del mismo archivo en ambas ramas (main o master y feature/login), debes resolver los conflictos manualmente.

   - Eliminar una rama: `git branch -d <nombre-rama>`.
	Después de fusionar feature/login con master, ya no necesitas la rama feature/login. Para eliminarla:
	git branch -d feature/login

	Ejemplo completo de flujo de trabajo con ramas:
	================================================
	Crear una nueva rama para una funcionalidad:
	git branch feature/login

	Cambiar a esta rama:
	git checkout feature/login

	Verifico en que rama estoy
	git branch

	Hacer cambios y subirlos al Staging Area y al Repo Local: ej: crear un archivo login.html y luego:
	git add .
	git commit -m "Añadir funcionalidad de login"
	
	Subir rama a Github
	git push -u origin feature/login

	Fusionar la rama con master:
	git checkout master
	git merge feature/login

	Subir rama master fusionada
	git push -u origin master 

	Eliminar la rama después de fusionar:
	git branch -d feature/login


Trabajo con Repositorios Remotos
   - Clonar un repositorio remoto: `git clone <url-repositorio>`.
	Descargar una copia completa de un repositorio desde un servidor remoto
	git clone https://github.com/sbsanchez21/clase02Uade.git

   - Vincular un repositorio remoto: `git remote add origin <url-repositorio>`.
   git remote add origin https://github.com/sbsanchez21/clase02Uade.git

   - Enviar cambios al repositorio remoto: `git push -u origin <nombre-rama>`.
   Sube los cambios de tu repositorio local al repositorio remoto
   git push -u origin feature/login

   - Traer cambios del repositorio remoto: `git pull origin <nombre-rama>`.
	Es un comando que combina dos operaciones:
	git fetch: Descarga los cambios más recientes del repositorio remoto al repo local
	git merge: Fusiona automáticamente los cambios descargados en el repo local con tu rama local actual.

	git pull origin master
   
   - Ver repositorios remotos: `git remote -v`.

Resolución de Conflictos
   - ¿Qué es un conflicto y cómo se produce?
   - Identificar conflictos: `git status`.
   - Resolver conflictos manualmente (editar archivos conflictivos).
   - Marcar conflictos como resueltos: `git add <archivo>`.
   - Finalizar la fusión: `git commit`.

Integración de Git con Java
   - Uso de `.gitignore` para excluir archivos (ejemplo: `target/`, `.classpath`, `.project`).

Buenas Prácticas en el Control de Versiones
   - Escribir mensajes de commit claros y descriptivos.
   - Mantener commits atómicos (un cambio por commit).
   - Evitar archivos binarios en el repositorio.
   - Revisar el historial de cambios antes de fusionar ramas.




JavaScript: 
===========
Objetivo de la Clase  
Introducir los conceptos fundamentales de JavaScript para desarrollo web, enfocándose en su uso en el navegador, manipulación del DOM, eventos, asincronía y consumo de APIs.  


1. Introducción a JavaScript en el Navegador (30 min)  
- ¿Para que sirve JavaScript?  
    Agrega comportamiento dinámico e interactividad a una página web, mientras que HTML y CSS se encargan de la estructura y el diseño estático.
    Ejemplos: holaJs.html
        HTML/CSS: Solo definen estructura y estilos estáticos, JS: Permite añadir, eliminar o cambiar elementos HTML, alterar estilos CSS dinámicamente.
        HTML/CSS: No pueden realizar cálculos, validaciones o tomar decisiones. JS: Ejecuta lógica compleja, Validar formularios antes de enviarlos, Filtrar o ordenar listas.
        HTML/CSS: Solo pueden manejar pseudo-clases básicas como :hover. JavaScript: Responde a eventos complejos, Clicks, teclas presionadas, movimientos del mouse, cuanto tiempo veo un video
        HTML/CSS: Solo muestran datos (requieren recargar la página para actualizarlos). JavaScript: Puede consumir APIs y actualizar la página sin recargar.


- Inclusión de JS en HTML  
  - Etiqueta `<script>` (inline vs externo).  ver imagen 
   

- Herramientas básicas  
  - Consola del navegador (Chrome DevTools).  
  - debuggin con VSC: ejemplo con holaJs.html
    Icono de Debug Ctrl+Shift+D
    Create a launch.json file
    Web Browser Chrome
    Configuración de launch.json, colocer url de archivo html levantado con liveserver
    Poner breakpoint en js

- Variables y Tipos de Datos:
    - `var`, obsoleta hoisting, ver imagen
    - `let`, `const`. 
      let y const sí tienen hoisting, pero no pueden ser usadas antes de su línea de declaración.
    - Tipos de Datos: Números, cadenas, booleanos, `null`, `undefined`.

- Estructuras de Control:
    - Condicionales: `if`, `else if`, `else`, `switch`.
    - Bucles: `for`, `while`, `do...while`.

- Funciones:
    - Declaración y llamada de funciones.
    - Parámetros y valores de retorno.
    - Funciones anónimas y funciones de flecha.

- Métodos de Array


2. Manipulación del DOM (1 hora)  
- ¿Qué es el DOM?  
  El DOM (Document Object Model) es una representación en forma de árbol de los elementos de una página web. Cada etiqueta HTML es un nodo que puede ser accedido y modificado con JavaScript.

- Selección de elementos  
  - `getElementById`, `querySelector`, `querySelectorAll`.  

- Modificación del DOM  
  - `innerHTML`, `textContent`, `createElement`, `appendChild`.  
 

3. Eventos y Formularios (1 hora)  
  Los eventos son acciones o sucesos que ocurren en el navegador 
    Ejemplos de eventos HTML:
    Cuando un usuario hace clic con el mouse
    Cuando se ha cargado una página web
    Cuando se ha cargado una imagen
    Cuando el mouse se mueve sobre un elemento
    Cuando se cambia un campo de entrada
    Cuando se envía un formulario HTML
    Cuando un usuario pulsa una tecla

  - Manejo de eventos  
    - inline
    - propiedades del dom 
    - `addEventListener`: recomendado
      Puedes agregar varias funciones para el mismo evento en un elemento:

    

4. Asincronía en JavaScript (1 hora)  
  El código asincrónico permite que JavaScript inicie una tarea que puede llevar tiempo y continúe ejecutando otras partes del código sin esperar a que la primera tarea se complete.
    Llamadas a APIs
    Lectura de archivos
    Consultas a bases de datos

  Callbacks (El enfoque tradicional):
    Una función de callback es una función que se pasa como argumento a otra función.
    La función que recibe el callback lo ejecuta cuando la operación asíncrona se completa.
  - Callbacks  
    - Ejemplo con `setTimeout`.  
    - Problema del "Callback Hell".  

  Promises (Introducidas en ES6):
    Una Promise representa el resultado eventual (éxito o fracaso) de una operación asíncrona.
    Tiene tres estados posibles:
    Pending (Pendiente): La operación aún no se ha completado.
    Fulfilled (Resuelta): La operación se completó con éxito y tiene un valor.
    Rejected (Rechazada): La operación falló y tiene una razón (generalmente un error).

  Consumo de APIs con `fetch`  
    

  Async/Await (Introducido en ES2017):
    async y await son una sintaxis más reciente que se construye sobre las Promises, proporcionando una forma aún más intuitiva y similar al código síncrono para escribir código asíncrono.
    Una función declarada con async siempre devuelve una Promise (implícitamente).
    La palabra clave await solo se puede usar dentro de una función async. Detiene la ejecución de la función async hasta que la Promise que se está esperando se resuelva (o se rechace).    




  - Ejercicio práctico:  
  - Hacer una petición a una API y mostrar los datos en una tabla HTML.  

  





  
